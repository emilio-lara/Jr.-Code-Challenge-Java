package main;

import java.sql.*;
import java.util.List;

/*
 * 	This class will create all DB need to create new table and insert records into 
 */
public class DB {
	Connection conn = null;
	Statement statement = null;

	public Statement dbConnection(String dbPath) throws SQLException {

		conn = DriverManager.getConnection("jdbc:sqlite:" + dbPath);
		statement = conn.createStatement();
		System.out.println("connected");

		return statement;

	}
	// This will create table and the schema 
	public void createTable(String table) throws SQLException {
		String querie = "CREATE TABLE IF NOT EXISTS " + table +"(" +
				" A TEXT," +
				" B TEXT," +
				" C TEXT," +
				" D TEXT," +
				" E TEXT," +
				" F TEXT," +
				" G TEXT," +
				" H TEXT," +
				" I TEXT," +
				" J TEXT )";

		execute(querie);
		System.out.println("table created");
	}
	// This method will insert records from a arraylist
	public void insert(String table, List records) throws SQLException {
		long startTime = System.currentTimeMillis();
		long endTime = 0;
		
		PreparedStatement pstatement = conn
				.prepareStatement("INSERT INTO " + table + "(A,B,C,D,E,F,G,H,I,J) " + "VALUES(?,?,?,?,?,?,?,?,?,?)");
		for (int i = 1; i <1000 /*records.size()*/; i++) {
			System.out.println("insert record# " + i);
			String line = (String) records.get(i);
			String[] rec = line.split(",");
			if(rec.length!=11)
				continue;

			pstatement.setString(1, rec[0]);
			pstatement.setString(2, rec[1]);
			pstatement.setString(3, rec[2]);
			pstatement.setString(4, rec[3]);
			pstatement.setString(5, rec[4] + rec[5]);
			pstatement.setString(6, rec[6]);
			pstatement.setString(7, rec[7]);
			pstatement.setString(8, rec[8]);
			pstatement.setString(9, rec[9]);
			pstatement.setString(10, rec[10]);
			pstatement.executeUpdate();
		}
		pstatement.close();
		
		endTime = System.currentTimeMillis();
		
		long totalTime =  ((startTime - endTime) /1000);
		int secondLeft = (int) (totalTime%60);
		int minutes = (int) (totalTime/60);
		System.out.println("total time execution= minutes "+minutes+" seconds"+secondLeft);
		

	}
	// this method will drop a table 
	public void dropTable(String table) throws SQLException {
		String querie = "DROP TABLE IF EXISTS " + table;
		execute(querie);
		System.out.println("table droped");

	}
	// This method use as helper to execute the statement 
	public void execute(String querie) throws SQLException {
		statement.execute(querie);

	}
	
	// Method that close all DB connections 
	public void closeConnection() throws SQLException {
		conn.close();
		statement.close();
	}

}
